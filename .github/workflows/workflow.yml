name: Go Workflow

on:
  push:
  pull_request:
    branches: [ "master" ]
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      # environment created automatically by GitHub
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.6'
      
      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Run go vet
        run: go vet ./...
      
      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
  
      - name: Run staticcheck
        run: staticcheck ./...
  
      - name: Install golint
        run: go install golang.org/x/lint/golint@latest
  
      - name: Run golint
        run: golint ./...

      - name: Run tests
        run: go test -v ./...
      
      - name: Generate test report
        uses: robherley/go-test-action@v0.1.0
      
      - name: Generate test coverage
        run: |
          echo "creating test command..."
          TEST_COMMAND="go test"
          FOLDERS_AFTER_EXCLUDE_FROM_TEST="go list ./..."
          for item in $(echo ${{ vars.EXCLUDE_FROM_TEST }} | tr ',' ' '); do
            FOLDERS_AFTER_EXCLUDE_FROM_TEST="${FOLDERS_AFTER_EXCLUDE_FROM_TEST} | grep -v \"$item\""
          done
          FOLDERS_AFTER_EXCLUDE_FROM_TEST="\$(${FOLDERS_AFTER_EXCLUDE_FROM_TEST})"
          echo $FOLDERS_AFTER_EXCLUDE_FROM_TEST
          TEST_COMMAND="${TEST_COMMAND} ${FOLDERS_AFTER_EXCLUDE_FROM_TEST} -coverprofile=./cover.out -covermode=atomic -coverpkg=./..."
          echo $TEST_COMMAND
          eval $TEST_COMMAND

      - name: Get coverage for badge
        run: |
          COVERAGE=$(go tool cover -func=cover.out | grep total: | grep -Eo '[0-9]+\.[0-9]+')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

          REF=${{ github.ref }}
          echo "github.ref: $REF"
          IFS='/' read -ra PATHS <<< "$REF"
          BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
          echo $BRANCH_NAME
          echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV

      - name: Create the badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: dcbe5bcf199a6a6915de30365c2a2d46
          filename: authconnecthub__${{ env.BRANCH }}.json
          label: Test Coverage
          message: ${{ env.COVERAGE }}%
          namedLogo: go
          maxColorRange: 100
          minColorRange: 0
          valColorRange: ${{ env.COVERAGE }}

      - name: Visualize Coverage Profile
        run: | 
          go tool cover -html=cover.out -o=cover.html
          mv cover.html ./coverage

      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # location of the coverage artifacts
          path: "./coverage"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Adding test coverage notification
        run: echo '[View Test Coverage Report](https://minhmannh2001.github.io/authconnecthub/cover.html)' >> $GITHUB_STEP_SUMMARY

      - name: Check test coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          config: ./coverage/.testcoverage.yml
      
# https://sparkbox.com/foundry/go_vet_gofmt_golint_to_code_check_in_Go
# https://staticcheck.dev/
# https://github.com/marketplace/actions/go-test-action
# https://github.com/marketplace/actions/go-coverage
# deploy coverage report to GitHub Pages: https://medium.com/@mpaternostro/how-to-deploy-pages-on-github-using-actions-a9281d03b345
# https://github.com/marketplace/actions/go-test-coverage
# https://github.com/actions/deploy-pages/issues/76
# https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/
# https://dev.to/thejaredwilcurt/coverage-badge-with-github-actions-finally-59fa
# https://eremeev.ca/posts/golang-test-coverage-github-action/
# https://medium.com/@sohaib278/how-to-add-go-unit-tests-and-coverage-stats-in-your-ci-using-github-actions-600b866bfae8
# https://josh-ops.com/posts/github-code-coverage/
# https://www.alexedwards.net/blog/ci-with-go-and-github-actions