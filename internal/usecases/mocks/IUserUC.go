// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/minhmannh2001/authconnecthub/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IUserUC is an autogenerated mock type for the IUserUC type
type IUserUC struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *IUserUC) Create(_a0 entity.User) (entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.User) entity.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsernameOrEmail provides a mock function with given fields: _a0, _a1
func (_m *IUserUC) FindByUsernameOrEmail(_a0 string, _a1 string) (*entity.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameOrEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entity.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserUC creates a new instance of IUserUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUC {
	mock := &IUserUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
